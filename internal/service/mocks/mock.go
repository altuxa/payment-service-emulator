// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/altuxa/payment-service-emulator/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Verification mocks base method.
func (m *MockUser) Verification(payId int, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verification", payId, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verification indicates an expected call of Verification.
func (mr *MockUserMockRecorder) Verification(payId, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verification", reflect.TypeOf((*MockUser)(nil).Verification), payId, email)
}

// MockPayment is a mock of Payment interface.
type MockPayment struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentMockRecorder
}

// MockPaymentMockRecorder is the mock recorder for MockPayment.
type MockPaymentMockRecorder struct {
	mock *MockPayment
}

// NewMockPayment creates a new mock instance.
func NewMockPayment(ctrl *gomock.Controller) *MockPayment {
	mock := &MockPayment{ctrl: ctrl}
	mock.recorder = &MockPaymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayment) EXPECT() *MockPaymentMockRecorder {
	return m.recorder
}

// ByUserEmail mocks base method.
func (m *MockPayment) ByUserEmail(email string) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByUserEmail", email)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByUserEmail indicates an expected call of ByUserEmail.
func (mr *MockPaymentMockRecorder) ByUserEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByUserEmail", reflect.TypeOf((*MockPayment)(nil).ByUserEmail), email)
}

// ByUserID mocks base method.
func (m *MockPayment) ByUserID(userID int) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByUserID", userID)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByUserID indicates an expected call of ByUserID.
func (mr *MockPaymentMockRecorder) ByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByUserID", reflect.TypeOf((*MockPayment)(nil).ByUserID), userID)
}

// CancelPayment mocks base method.
func (m *MockPayment) CancelPayment(paymentId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPayment", paymentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelPayment indicates an expected call of CancelPayment.
func (mr *MockPaymentMockRecorder) CancelPayment(paymentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPayment", reflect.TypeOf((*MockPayment)(nil).CancelPayment), paymentId)
}

// CreatePayment mocks base method.
func (m *MockPayment) CreatePayment(id int, email string, sum float64, val string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", id, email, sum, val)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentMockRecorder) CreatePayment(id, email, sum, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPayment)(nil).CreatePayment), id, email, sum, val)
}

// PaymentProcessing mocks base method.
func (m *MockPayment) PaymentProcessing(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentProcessing", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentProcessing indicates an expected call of PaymentProcessing.
func (mr *MockPaymentMockRecorder) PaymentProcessing(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentProcessing", reflect.TypeOf((*MockPayment)(nil).PaymentProcessing), id)
}

// PaymentStatus mocks base method.
func (m *MockPayment) PaymentStatus(paymentId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentStatus", paymentId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentStatus indicates an expected call of PaymentStatus.
func (mr *MockPaymentMockRecorder) PaymentStatus(paymentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentStatus", reflect.TypeOf((*MockPayment)(nil).PaymentStatus), paymentId)
}
